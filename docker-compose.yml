# Docker Compose for QuantumTrade Pro Enhanced Processing Engine

services:
  # Redis Cache (L1 Cache)
  redis:
    image: redis:latest
    container_name: quantumtrade-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # TimescaleDB (L2 Cache & Time-series Data)
  timescaledb:
    image: postgres:15
    container_name: quantumtrade-timescaledb
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./scripts/setup-cache-schema.sql:/docker-entrypoint-initdb.d/01-setup-cache-schema.sql
    environment:
      - POSTGRES_DB=${TIMESCALE_DB:-quantumtrade}
      - POSTGRES_USER=${TIMESCALE_USER:-postgres}
      - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD:-timescale_password}
      - TIMESCALEDB_TELEMETRY=off
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-postgres} -d ${TIMESCALE_DB:-quantumtrade}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # MongoDB Database (Document Store)
  mongodb:
    image: mongo:7.0
    container_name: quantumtrade-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongodb_password}
      - MONGO_INITDB_DATABASE=${MONGO_DB:-quantumtrade}
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantumtrade-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_DB=${TIMESCALE_DB:-quantumtrade}
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-timescale_password}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-quantumtrade}
      - MONGO_ROOT_USER=${MONGO_ROOT_USER:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongodb_password}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL:-your_supabase_project_url}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-your_supabase_service_role_key}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-dk3QTT4Pvp0KcxTFtfWUlyG4lxWMqJBZ7amwSxqBkE8RcGK3VteI5J2v3mbKRgrQ}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-oBG87XADV14fZV9dZn6zyccscRZMDc95pzUaNREkzclr90vAjyaj4D4dZPIpVH7P}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-8159453795:AAE9bbijfsVmByfdgBLrvkJyUABge8PbQG0}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-1751294791}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Enhanced Processing Engine (Microservice)
  processing-engine:
    build:
      context: .
      dockerfile: Dockerfile.processing
    container_name: quantumtrade-processing-engine
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_DB=${TIMESCALE_DB:-quantumtrade}
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-timescale_password}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-quantumtrade}
      - MONGO_ROOT_USER=${MONGO_ROOT_USER:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongodb_password}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - MAX_WORKERS=16
      - CACHE_DURATION=300000
      - UPDATE_INTERVAL=30000
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Data Orchestrator (Microservice)
  data-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    container_name: quantumtrade-data-orchestrator
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_DB=${TIMESCALE_DB:-quantumtrade}
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-timescale_password}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-quantumtrade}
      - MONGO_ROOT_USER=${MONGO_ROOT_USER:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongodb_password}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - MAX_WORKERS=16
      - CACHE_DURATION=300000
      - UPDATE_INTERVAL=30000
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  # Market Regime Engine (Microservice)
  market-regime-engine:
    build:
      context: .
      dockerfile: Dockerfile.regime
    container_name: quantumtrade-market-regime-engine
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_DB=${TIMESCALE_DB:-quantumtrade}
      - TIMESCALE_USER=${TIMESCALE_USER:-postgres}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-timescale_password}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-quantumtrade}
      - MONGO_ROOT_USER=${MONGO_ROOT_USER:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongodb_password}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - ANALYSIS_INTERVAL=60000
      - MAX_HISTORY=1000
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - quantumtrade-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: quantumtrade-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantumtrade-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: quantumtrade-grafana
    restart: unless-stopped
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - quantumtrade-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  alertmanager:
    image: prom/alertmanager:latest
    container_name: quantumtrade-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - quantumtrade-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  redis_data:
    driver: local
  timescaledb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  quantumtrade-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 