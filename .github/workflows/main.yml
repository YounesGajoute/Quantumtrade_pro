name: QuantumTrade Pro CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Test and Quality Assurance
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Wait for Redis
      run: |
        for i in {1..30}; do
          if redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; then
            echo "Redis is ready!"
            break
          fi
          echo "Waiting for Redis... ($i/30)"
          sleep 2
        done
        redis-cli -h localhost -p 6379 ping

    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          if pnpm install --frozen-lockfile; then
            echo "Dependencies installed successfully"
            break
          fi
          echo "Retry $i failed, retrying..."
          rm -rf node_modules .pnpm-store
          sleep 5
        done

    - name: Run linting
      run: pnpm lint

    - name: Run type checking
      run: pnpm tsc --noEmit

    - name: Run tests
      run: pnpm test --coverage --watchAll=false
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379
        NEXT_PUBLIC_BINANCE_API_URL: https://api.binance.com
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Node version: $(node --version)"
        echo "pnpm version: $(pnpm --version)"
        echo "Redis status:"
        redis-cli -h localhost -p 6379 ping || echo "Redis not responding"
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "=== Environment Variables ==="
        env | grep -E "(NODE_|PNPM_|REDIS_|CI)" | head -10

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies with retry
      run: |
        for i in {1..3}; do
          if pnpm install --frozen-lockfile; then
            echo "Dependencies installed successfully"
            break
          fi
          echo "Retry $i failed, retrying..."
          rm -rf node_modules .pnpm-store
          sleep 5
        done

    - name: Build application
      run: pnpm build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_BINANCE_API_URL: https://api.binance.com
        NEXT_PUBLIC_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        NEXT_PUBLIC_APP_URL: https://quantumtrade-pro.com

    - name: Check build output
      run: |
        if [ -d ".next" ]; then
          echo "✅ Build successful - .next directory created"
          echo "Build contents:"
          ls -la .next/
          echo "Static files:"
          find .next/static -name "*.js" -o -name "*.css" | head -5
        else
          echo "❌ Build failed - no .next directory found"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          pnpm-lock.yaml
        retention-days: 7

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail pipeline on vulnerabilities initially
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Display security summary
      if: always()
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "🔍 Security scan completed"
          echo "📊 Results uploaded to Security tab"
        else
          echo "⚠️ Security scan results not found"
        fi

  # Docker Build and Push
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/quantumtrade-pro
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_BINANCE_API_URL=https://api.binance.com

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose, etc.

    - name: Run staging health check
      run: |
        echo "🏥 Running staging health checks..."
        # Add health check commands
        # curl -f https://staging.yourdomain.com/api/health || exit 1

    - name: Notify deployment
      run: |
        echo "✅ Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        # Add your production deployment commands here
        # Example: kubectl apply, docker-compose, etc.

    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests..."
        # Add smoke tests to verify deployment
        # curl -f https://yourdomain.com/api/health || exit 1

    - name: Notify deployment
      run: |
        echo "✅ Production deployment completed successfully!"

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run performance tests
      run: |
        echo "🚄 Running performance tests..."
        # Add performance testing commands here
        # Example: lighthouse, k6, etc.
        if command -v lighthouse >/dev/null 2>&1; then
          echo "Running Lighthouse audit..."
          # lighthouse https://yourdomain.com --output=json --output-path=./lighthouse-report.json
        else
          echo "Lighthouse not available, skipping performance audit"
        fi

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          lighthouse-report.json
          performance-metrics.json
        retention-days: 30

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run integration tests
      run: |
        if npm run | grep -q "test:integration"; then
          echo "🔗 Running integration tests..."
          pnpm run test:integration
        else
          echo "ℹ️ No integration tests found, skipping..."
        fi
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379
        NEXT_PUBLIC_BINANCE_API_URL: https://api.binance.com

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
    - name: Check job results
      id: check
      run: |
        echo "test_result=${{ needs.test.result }}" >> $GITHUB_OUTPUT
        echo "build_result=${{ needs.build.result }}" >> $GITHUB_OUTPUT
        echo "security_result=${{ needs.security.result }}" >> $GITHUB_OUTPUT

    - name: Notify on success
      if: needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
      run: |
        echo "✅ All core checks passed successfully!"
        echo "🎉 Pipeline completed without errors"
        echo "📦 Build artifacts are ready"
        echo "🔒 Security scan completed"
        # Add notification logic (Slack, Discord, etc.)
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"✅ QuantumTrade Pro CI/CD completed successfully!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "❌ Some core checks failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "🔍 Check the logs above for details"
        # Add failure notification logic
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"❌ QuantumTrade Pro CI/CD failed! Check GitHub Actions for details."}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Summary
      if: always()
      run: |
        echo "📊 Pipeline Summary:"
        echo "- Test Suite: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security Scan: ${{ needs.security.result }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Triggered by: ${{ github.event_name }}"
